print(*(lambda locations, cities: map(lambda mM: mM((lambda rec: lambda p1, p2, p3, p4, p5: rec(rec, p1, p2, p3, p4, p5))(lambda travel, locations, cities, city, visited, mM: (lambda dists: 0 if dists == [] else mM(dists))([locations[(city, neighbr)] + travel(travel, locations, cities, neighbr, visited+[city], mM) for neighbr in cities if city != neighbr and neighbr not in visited]))(locations, cities, city, [], mM) for city in cities), (min, max)))(*(lambda dists: (lambda rec: lambda p1, p2, p3: rec(rec, p1, p2, p3))(lambda extract, dists, n, ind: (dict(), set()) if ind == n else (lambda city1, city2, dist, other_dict, other_set: ({**other_dict, (city1, city2): int(dist), (city2, city1): int(dist)}, other_set | {city1, city2}))(*dists[ind], *extract(extract, dists, n, ind+1)))(dists, len(dists), 0))([dist.split() for dist in open("Day09.txt").read().replace("to ", "").replace("= ", "").split("\n")])), sep = "\n")