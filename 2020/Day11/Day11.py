print(*(lambda seats: ((lambda func, max_occupied: (lambda rec: lambda par1, par2: rec(rec, par1, par2))(lambda part1, seats_last, seats: sum(row.count("#") for row in seats) if seats_last == seats else part1(part1, seats, [[(lambda seat, occupied: "." if seat == "." else ("#" if ((seat == "L" and occupied == 0) or (seat == "#" and occupied < max_occupied)) else "L"))(seats[j][i], func(seats, j, i)) for i in range(len(seats[0]))] for j in range(len(seats))]))([], seats))(func, max_occupied) for max_occupied, func in ((4, (lambda seats, j, i: sum((yp or xp) and 0 <= j+yp < len(seats) and 0 <= i+xp < len(seats[0]) and seats[j+yp][i+xp] == "#" for yp in (-1, 0, 1) for xp in (-1, 0, 1)))), (5, lambda seats, j, i: sum((lambda rec: lambda par1, par2, par3: rec(rec, par1, par2, par3))(lambda part2_c, pp, yp, xp: 0 if not (0 <= j+yp < len(seats) and 0 <= i+xp < len(seats[0])) else part2_c(part2_c, pp, yp+pp[0], xp+pp[1]) if seats[j+yp][i+xp] == "." else seats[j+yp][i+xp] == "#")((yp, xp), yp, xp) for yp in (-1, 0, 1) for xp in (-1, 0, 1) if (yp or xp))))))(open("Day11.txt").read().split("\n")), sep = "\n")
